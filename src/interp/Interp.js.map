{"version":3,"sources":["src/interp/Interp.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;YAEH;;;;;;;eAOG;YACF;gBAYE;oBAVQ,QAAG,GAAe,CAAC,CAAC,CAAI,kBAAkB;oBAC1C,QAAG,GAAe,CAAC,CAAC,CAAI,mBAAmB;oBAC3C,QAAG,GAAe,CAAC,CAAC,CAAI,kBAAkB;oBAC1C,QAAG,GAAe,CAAC,CAAC,CAAI,mBAAmB;oBAC3C,OAAE,GAAgB,CAAC,CAAC,CAAI,oEAAoE;oBAC5F,WAAM,GAAY,CAAC,CAAC,CAAI,QAAQ;oBAExC,mEAAmE;oBAC3D,iBAAY,GAAY,IAAI,CAAC;gBAIrC,CAAC;gBAOD,sBAAW,mCAAE;oBALd;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;oBAClB,CAAC;oBAEF;;;;uBAIG;yBACF,UAAc,KAAa;wBAEzB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;oBACjE,CAAC;;;mBAVA;gBAiBD,sBAAW,mCAAE;oBALd;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;oBAClB,CAAC;oBAEF;;;;uBAIG;yBACF,UAAc,KAAa;wBAEzB,IAAI,CAAC,GAAG,GAAY,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;wBACxE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC3B,CAAC;;;mBAXA;gBAkBD,sBAAW,mCAAE;oBALd;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;oBAClB,CAAC;oBAEF;;;;uBAIG;yBACF,UAAc,KAAa;wBAEzB,IAAI,CAAC,GAAG,GAAY,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;wBACxE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC3B,CAAC;;;mBAXA;gBAkBD,sBAAW,mCAAE;oBALd;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;oBAClB,CAAC;oBAEF;;;;uBAIG;yBACF,UAAc,KAAa;wBAEzB,IAAI,CAAC,GAAG,GAAY,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;wBACxE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC3B,CAAC;;;mBAXA;gBAaF;;;;;;mBAMG;gBACK,yCAAW,GAAlB,UAAmB,CAAW;oBAAX,iBAAW,GAAX,KAAW;oBAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;wBACpB,IAAI,CAAC,aAAa,EAAE,CAAC;oBAEvB,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,GAAG,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC;oBAEzE,MAAM,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAC,IAAI,CAAC,GAAG,CAAC;gBACrC,CAAC;gBAEO,2CAAa,GAArB;oBAEE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CACxB,CAAC;wBACC,IAAI,GAAG,GAAW,IAAI,CAAC,GAAG,CAAC;wBAC3B,IAAI,CAAC,GAAG,GAAU,IAAI,CAAC,GAAG,CAAC;wBAC3B,IAAI,CAAC,GAAG,GAAU,GAAG,CAAC;oBACxB,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CACxB,CAAC;wBACC,IAAI,GAAG,GAAW,IAAI,CAAC,GAAG,CAAC;wBAC3B,IAAI,CAAC,GAAG,GAAU,IAAI,CAAC,GAAG,CAAC;wBAC3B,IAAI,CAAC,GAAG,GAAU,GAAG,CAAC;oBACxB,CAAC;oBAED,IAAI,CAAC,MAAM,GAAS,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC1C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC5B,CAAC;gBACH,0BAAC;YAAD,CAvIA,AAuIC,IAAA;YAvID,qDAuIC,CAAA","file":"src/interp/Interp.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Linear interpolation class using the parametric form of a line.  The implementation is optimized for a single setting of parameters\n * followed by multiple interpolations using the same parameters.\n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export class LinearInterpolation \n {\n   private _x1: number     = 0;    // left x endpoint\n   private _x2: number     = 0;    // right x endpoint\n   private _y1: number     = 0;    // left y endpoint\n   private _y2: number     = 0;    // right y endpoint\n   private _t: number      = 0;    // parameter (in [0,1] for interpolation, outside for extrapolation)\n   private _range: number  = 0;    // x2-x1\n\n   // true if any data setting invalidates previously computed results\n   private _invalidated: boolean = true;\n\n   constructor()\n   {\n   }\n\n  /**\n   * Return current x1 value\n   *\n   * @return number Current value of x1\n   */\n   public get x1(): number\n   {\n     return this._x1;\n   }\n\n  /**\n   * Assign x1 value\n   *\n   * @param value : number Left endpoint of the interval [x1,x2]\n   */\n   public set x1(value: number)\n   {\n     this._x1 = isNaN(value) || !isFinite(value) ? this._x1 : value;\n   }\n\n  /**\n   * Return current x2 value\n   *\n   * @return number Current value of x2\n   */\n   public get x2(): number\n   {\n     return this._x2;\n   }\n\n  /**\n   * Assign x2 value\n   *\n   * @param value : number Rightt endpoint of the interval [x1,x2]\n   */\n   public set x2(value: number)\n   {\n     this._x2          = isNaN(value) || !isFinite(value) ? this._x2 : value;\n     this._invalidated = true;\n   }\n\n  /**\n   * Return current y1 value\n   *\n   * @return number Current value of y1\n   */\n   public get y1(): number\n   {\n     return this._y1;\n   }\n\n  /**\n   * Assign y1 value\n   *\n   * @param value : number Left endpoint of the interval [y1,y2]\n   */\n   public set y1(value: number)\n   {\n     this._y1          = isNaN(value) || !isFinite(value) ? this._y1 : value;\n     this._invalidated = true;\n   }\n\n  /**\n   * Return current y2 value\n   *\n   * @return number Current value of y2\n   */\n   public get y2(): number\n   {\n     return this._y2;\n   }\n\n  /**\n   * Assign y2 value\n   *\n   * @param value : number Right endpoint of the interval [y1,y2]\n   */\n   public set y2(value: number)\n   {\n     this._y2          = isNaN(value) || !isFinite(value) ? this._y2 : value;\n     this._invalidated = true;\n   }\n\n  /**\n   * Perform a linear interpolation based on the current parameters\n   *\n   * @param x : number x-value for interpolation where x1 <= x <= x2 for interpolation, alghough x is allowed to be outside that interval for extrapolation\n   *\n   * @return number (linearly) Interpolated (or extrapolated) value\n   */\n   public interpolate(x: number=0): number\n   {\n     if (this._invalidated)\n       this.__recalculate();\n\n     let t: number = this._range < 0.000000001 ? 0 : (x-this._x1)/this._range;\n\n     return (1-t)*this._y1 + t*this._y2;\n   }\n\n   private __recalculate(): void\n   {\n     if (this._x2 < this._x1)\n     {\n       let tmp: number = this._x1;\n       this._x1        = this._x2;\n       this._x2        = tmp;\n     }\n\n     if (this._y2 < this._y1)\n     {\n       let tmp: number = this._y1;\n       this._y1        = this._y2;\n       this._y2        = tmp;\n     }\n\n     this._range       = (this._x2 - this._x1); \n     this._invalidated = false;\n   }\n }\n"],"sourceRoot":"/source/"}