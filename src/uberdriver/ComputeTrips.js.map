{"version":3,"sources":["src/uberdriver/ComputeTrips.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;IAEH;;;;;;;;;;;;;;;;;OAiBG;IACF,mBAA0B,CAAS,EAAE,CAAS;QAE5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,CAAC,CAAC;QAEX,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,CAAC,CAAC;QAEX,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;QAE9B,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnB,EAAE,CAAA,CAAE,CAAC,GAAG,CAAE,CAAC;YACT,MAAM,CAAC,CAAC,CAAC,CAAE,0BAA0B;QAEvC,yJAAyJ;QACzJ,4BAA4B;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACT,MAAM,CAAC,QAAQ,CAAC;QAElB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAE,CAAC;IAClC,CAAC;IAvBD,iCAuBC,CAAA","file":"src/uberdriver/ComputeTrips.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function to compute the number of consecutive five-star trips required to restore an Uber driver's rating to at least its prior value after \n * a single trip in which the rating was less than the current ranking (known as a downrank)\n *\n * Note: The variable names are non-descriptive but relate to the formula presented in the solution)\n *\n * @param r : number Current driver rating before downrated trip \n * @param t : number Rating received on current trip (Integer, must be less than the current ranking)\n * \n * @return number - integer number of consecutive five-star trips required to restore the driver rating to at least its value before the single downrated trip.\n * If the driver is already ranked 5-star, there is no number of 5-star trips that can restore the ranking since 5 is the highest ranking.  The single downrate\n * will always keep the ranking just below 5.0 no matter how many future 5-star trips are awarded.  Infinity is returned in this case to enable more predictable\n * testing (i.e do not allow NaN to be computed)\n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export function tripCount(r: number, t: number): number \n {\n   if (isNaN(r) || !isFinite(r))\n     return 0;\n\n   if (isNaN(t) || !isFinite(t))\n     return 0;\n\n   r = Math.abs(r);\n   t = Math.round( Math.abs(t) );\n\n   t = Math.max(1, t);\n   r = Math.min(5, r);\n\n   if( t > r )\n     return 0;  // there is no downranking\n\n   // since 5 is the maximum possible rating, there is no way to restore exactly 5.0 or better once there is a downrate since 5-star is the maximum possible\n   // ranking for a single trip\n   if (r == 5)\n     return Infinity;\n\n   return Math.ceil( (r-t)/(5-r) );\n }\n"],"sourceRoot":"/source/"}