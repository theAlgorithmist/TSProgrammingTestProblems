{"version":3,"sources":["src/twodigits/TwoDigits.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;IAEH;;;;;;;;;;;;;;;;;OAiBG;IACF,uBAA8B,CAAW,EAAE,CAAW;QAAxB,iBAAW,GAAX,KAAW;QAAE,iBAAW,GAAX,KAAW;QAEpD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAC,CAAC,EAAC,CAAC,EAAE,IAAI,EAAC,CAAC,EAAE,IAAI,EAAC,CAAC,EAAE,MAAM,EAAC,IAAI,EAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAC,CAAC,EAAE,IAAI,EAAC,CAAC,EAAE,MAAM,EAAC,IAAI,EAAC,CAAC;QAE7C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnB,IAAI,CAAC,GAAoB,EAAE,GAAC,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,KAAK,GAAgB,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC1C,IAAI,GAAG,GAAkB,KAAK,CAAC,MAAM,CAAC;QACtC,IAAI,IAAI,GAAiB,KAAK,CAAC,MAAM,CAAC,GAAG,GAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,IAAI,GAAiB,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,GAAC,CAAC,CAAC,CAAC;QAE9D,IAAI,CAAC,GAAW,CAAC,KAAK,GAAG,EAAE,GAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,GAAe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7B,kEAAkE;QAClE,IAAI,SAAS,GAAY,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,GAAG,WAAW,CAAC;QAErE,MAAM,CAAC,EAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAC,CAAC;IAC/D,CAAC;IA3BD,yCA2BC,CAAA","file":"src/twodigits/TwoDigits.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function to compute the last two digits of a positive integer (not a multiple of 10) and return whether or not removing the last two digits results in\n * a perfect square.  This function allows positive, non-multiples of 10 to be constructed instead of entering an arbitrary integer\n *\n * @param m : number Multiplier of 10, 0, 1, 2, 3, ...  \n * @default 0\n *\n * @param s : number Integer added to create a non-multiple of 10.  Must be in [1,9] and the resulting number, n, is of the form 10*m + s\n * @default 1\n * \n * @return Object - 'n' property is the square of the constructed number.  'ones' is the last digit (ltr) of the squared number (i.e. the ones place).  'tens'\n * is the next-to-last digit (i.e. tens place).  'square' is a boolen which is true if removing the last two digits of the squared number results in a perfect\n * square.\n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export function lastTwoDigits(m: number=0, s: number=1): Object \n {\n   if (isNaN(m) || !isFinite(m))\n     return {n:0, ones:0, tens:0, square:true};\n\n   if (isNaN(s) || !isFinite(s))\n     return {n: 0, ones:0, tens:0, square:true};\n\n   m = Math.round(m);\n   s = Math.round(s);\n   m = Math.max(0, m);\n   s = Math.min(9, s);\n   s = Math.max(1, s);\n\n   let n: number          = 10*m + s;\n   let value: string      = (n*n).toString();\n   let len: number        = value.length;\n   let ones: string       = value.charAt(len-1);\n   let tens: string       = len == 1 ? \"0\" : value.charAt(len-2);\n\n   let t: number = +value - 10*(+tens) - (+ones);\n   t             = Math.sqrt(t);\n\n   // zero-tolerance here is a bit crude, but workable for an example\n   let isPerfect: boolean = Math.abs( Math.floor(t) - t ) < 0.000000001;\n   \n   return {n: value, ones: ones, tens: tens, square: isPerfect};\n }\n"],"sourceRoot":"/source/"}