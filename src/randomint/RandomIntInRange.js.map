{"version":3,"sources":["src/randomint/RandomIntInRange.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;YAYF;gBAQC;;;;;;;;;;;mBAWG;gBACF,0BAAY,GAAa,EAAE,GAAa,EAAE,IAAc;oBAA5C,mBAAa,GAAb,OAAa;oBAAE,mBAAa,GAAb,OAAa;oBAAE,oBAAc,GAAd,QAAc;oBAEtD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBAE3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvC,CAAC;gBAEF;;;;;;;mBAOG;gBACK,sCAAW,GAAlB,UAAmB,GAAW,EAAE,GAAW;oBAEzC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;oBAC3D,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;oBAC3D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAElC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAC1B,CAAC;wBACC,IAAI,GAAG,GAAW,IAAI,CAAC,IAAI,CAAC;wBAC5B,IAAI,CAAC,IAAI,GAAS,IAAI,CAAC,IAAI,CAAC;wBAC5B,IAAI,CAAC,IAAI,GAAS,GAAG,CAAC;oBACxB,CAAC;oBAED,+BAA+B;oBAC/B,IAAI,CAAC,IAAI,IAAK,KAAK,CAAC;oBACpB,IAAI,CAAC,IAAI,IAAK,KAAK,CAAC;oBACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAC,CAAG,4BAA4B;gBACnE,CAAC;gBAEF;;;;;;;;qBAQE;gBACa,gCAAe,GAA7B,UAA8B,GAAW,EAAE,GAAW;oBAEpD,IAAI,MAAM,GAAW,GAAG,CAAC;oBACzB,IAAI,MAAM,GAAW,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBAExC,+BAA+B;oBAC/B,MAAM,IAAI,KAAK,CAAC;oBAChB,MAAM,IAAI,KAAK,CAAC;oBAEhB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;gBAC9D,CAAC;gBAEF;;;;;;;qBAOE;gBACM,mCAAQ,GAAf,UAAgB,SAAwB;oBAAxB,yBAAwB,GAAxB,iBAAwB;oBAEtC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAExC,IAAI,CAAC,GAAW,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBAE7D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9C,CAAC;gBACH,uBAAC;YAAD,CA9FD,AA8FE,IAAA;YA9FF,+CA8FE,CAAA","file":"src/randomint/RandomIntInRange.js","sourcesContent":["/** \r\n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Typescript Math Toolkit - Computes pseudo-random integers within an input range [a,b], where a and b are integers and b > a.  This\r\n * method can be used with the Math RNG or an optional seeded RNG.  There is automatic compensation for bias towards endpoints.\r\n * \r\n * @author Jim Armstrong\r\n * \r\n * @version 1.0\r\n */\r\n import {SeededRng} from './SeededRng';\r\n\r\n export class RandomIntInRange\r\n {\r\n   private _min: number;    // minimum value of range\r\n   private _max: number;    // maximum value of range\r\n   private _delta: number;  // interval width\r\n   private _seed: number;   // seed value for RNG\r\n   private _rng: SeededRng; // reference to SeededRng\r\n\r\n  /**\r\n   * Construct a new RandomIntInRange\r\n   *\r\n   * @param min:number Minium value of range\r\n   * @default 0\r\n   *\r\n   * @param max:number Maximum value of range\r\n   * @default 1\r\n   * \r\n   * @param seed:number Seed value to use if seeded RNG if desired\r\n   * @default 1\r\n   */\r\n   constructor(min: number=0, max: number=1, seed: number=1)\r\n   {\r\n     this.setInterval(min, max);\r\n\r\n     this._seed = Math.abs(seed);\r\n     this._seed = Math.max(1, this._seed);\r\n   }\r\n    \r\n  /**\r\n   * Set a new interval\r\n   *\r\n   * @param min: number New minimum-integer\r\n   * @param max: number New maximum-integer\r\n   *\r\n   * @return Nothing\r\n   */\r\n   public setInterval(min: number, max: number): void\r\n   {\r\n     this._min = isNaN(min) || !isFinite(min) ? this._min : min;\r\n     this._max = isNaN(max) || !isFinite(max) ? this._max : max;\r\n     this._min = Math.round(this._min);\r\n     this._max = Math.round(this._max);\r\n\r\n     if (this._max < this._min)\r\n     {\r\n       let tmp: number = this._min;\r\n       this._min       = this._max;\r\n       this._max       = tmp;\r\n     }\r\n\r\n     // compensate for endpoint bias\r\n     this._min  -= 0.499;\r\n     this._max  += 0.499;\r\n     this._delta = this._max-this._min;   // delta between max and min\r\n   }\r\n\r\n  /**\r\n\t * Generate a pseudo-random integer in a new input range using the system-supplied RNG.\r\n\t * \r\n\t * @param min:number Minimum value of range\r\n\t * \r\n\t * @param max:number Maximum value of range\r\n\t *\r\n\t * @return number New iterate in the specified range - there is no error testing on inputs for performance reasons\r\n\t */\r\n   public static generateInRange(min: number, max: number): number\r\n   {\r\n     let theMin: number = min;\r\n     let theMax: number = Math.max(min, max);\r\n      \r\n     // compensate for endpoint bias\r\n     theMax += 0.499;\r\n     theMin -= 0.499;\r\n\t\t\t   \r\n     return Math.round(theMin + Math.random()*(theMax - theMin));\r\n   }\r\n\r\n  /**\r\n\t * Generate a pseudo-random integer in the currently specified range.\r\n\t * \r\n\t * @param useSeeded:boolean - true if the seeded RNG is used\r\n\t * @default false\r\n\t * \r\n\t * @return number New pseudo-random integer in the current range\r\n\t */\r\n   public generate(useSeeded: boolean=false): number\r\n   {\r\n     if (useSeeded && !this._rng)\r\n       this._rng = new SeededRng(this._seed);\r\n     \r\n     let u: number = useSeeded ? this._rng.next() : Math.random();\r\n      \r\n     return Math.round(this._min + u*this._delta);\r\n    }\r\n  }"],"sourceRoot":"/source/"}