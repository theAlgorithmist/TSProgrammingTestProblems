{"version":3,"sources":["src/randomint/SeededRng.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;YAEH;;;;;;;;eAQG;YACF;gBAIC;;;;;mBAKG;gBACF,mBAAY,IAAY;oBARhB,UAAK,GAAW,CAAC,CAAC,CAAE,yBAAyB;oBAUnD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACjC,IAAI,GAAG,CAAC,CAAC;oBAEX,IAAI,GAAG,IAAI,CAAC,GAAG,CAAE,CAAC,EAAE,IAAI,CAAG,CAAC;oBAE7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,CAAC;gBAED;;;;;mBAKG;gBACK,wBAAI,GAAX;oBAEC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC3B,CAAC;gBAEF;;;;qBAIE;gBACK,4BAAQ,GAAf;oBAEE,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC;gBACxC,CAAC;gBAEF,iFAAiF;gBACzE,+BAAW,GAAnB;oBAEE,cAAc;oBACb,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,GAAC,IAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;oBAE7C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;gBACpB,CAAC;gBACH,gBAAC;YAAD,CAjDA,AAiDC,IAAA;YAjDD,iCAiDC,CAAA","file":"src/randomint/SeededRng.js","sourcesContent":["/** \r\n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n   \r\n/**\r\n * Typescript Math Toolkit - A 'game quality' implementation of a Park Miller LCG with seeding.  Use of seeding allows a repeatable sequence to be\r\n * generated for debugging purposes.  The complete algorithm is detailed at http://www.firstpr.com.au/dsp/rand31/\r\n * \r\n\r\n * @author Jim Armstrong\r\n * \r\n * @version 1.0\r\n */\r\n export class SeededRng\r\n {\r\n   private _seed: number = 1;  // seed used for this RNG\r\n\r\n  /**\r\n   * Construt a new SeededRng\r\n   *\r\n   * @param seed: Number - Initial (integer) seed value, which should be in the interval [1, 0X7FFFFFFE]\r\n   * \r\n   */\r\n   constructor(seed: number)\r\n\t {\r\n     if (isNaN(seed) || !isFinite(seed))\r\n       seed = 1;\r\n      \r\n     seed = Math.max( 1, seed  );\r\n      \r\n\t   this._seed = seed;\r\n\t }\r\n    \r\n  /**\r\n   * returns the next pseudo-random iterate\r\n   * \r\n   * @return number Next iterate in sequence as an unsigned integer\r\n   *\r\n   */\t\r\n   public next(): number\r\n\t {\r\n\t   return this.__generator();\r\n   }\r\n\t\t\r\n  /**\r\n\t * Return the next pseudo-random iterate in [0,1)\r\n\t * \r\n\t * @return Number - next number in sequence in the interval [0,1)\r\n\t */\r\n\t public asNumber(): number\r\n   {\r\n\t   return this.__generator() / 2147483647;\r\n   }\r\n\t\t\r\n\t // internal method - generator function, new = (16807*old * 16807) mod (2^31 - 1)\r\n\t private __generator(): number\r\n   {\r\n\t   // update seed\r\n     this._seed = (16807*this._seed) % 2147483647;\r\n\r\n     return this._seed;\r\n   }\r\n }"],"sourceRoot":"/source/"}