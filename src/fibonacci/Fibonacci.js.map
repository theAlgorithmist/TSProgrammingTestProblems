{"version":3,"sources":["src/fibonacci/Fibonacci.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;QAUW,MAAM,EACN,UAAU,EACV,MAAM,EACN,MAAM;IAEpB;;;;;;OAMG;IACF,mBAA0B,CAAS;QAEjC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,GAAG,CAAC;QAEb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACT,MAAM,CAAC,CAAC,CAAC;QAEX,mJAAmJ;QACnJ,oJAAoJ;QACpJ,4DAA4D;QAC5D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAE,UAAU,GAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,CAAC,CAAC,CAAE,CAAC;IAC5E,CAAC;IAZD,iCAYC,CAAA;;;;YAhCF;;;;;;;eAOG;YACW,oBAAA,MAAM,GAAe,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAC;YACpC,wBAAA,UAAU,GAAW,GAAG,GAAC,MAAM,CAAA,CAAC;YAChC,oBAAA,MAAM,GAAe,GAAG,GAAC,CAAC,GAAG,GAAG,MAAM,CAAC,CAAA,CAAC;YACxC,oBAAA,MAAM,GAAe,GAAG,GAAC,CAAC,GAAG,GAAG,MAAM,CAAC,CAAA,CAAC","file":"src/fibonacci/Fibonacci.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function to generate the n-th value of the Fibonacci sequence, f(n) = f(n-1) + f(n-2), f(0) = 0, f(1) = 1.  This version uses a generating function\n * for the sequence in lieu of the recursion.  Returns zero for invalid arguments.\n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export const sqrt_5: number     = Math.sqrt(5.0);\n export const sqrt_5_inv: number = 1.0/sqrt_5;\n export const f_arg1: number     = 0.5*(1.0 + sqrt_5);\n export const f_arg2: number     = 0.5*(1.0 - sqrt_5);\n\n/**\n * Return the n-th value of the Fibonacci sequence, 0, 1, 1, 2, 3, 5, 8, 13, ...\n *\n * @param n: number Zero-based index of the value to return, i.e. n = 0 for first value in sequence, n = 1 for second value, and so forth (n >= 0)\n *\n * @return number - n-th value of the Fibonacci sequence or zero for invalid arguments\n */\n export function fibonacci(n: number): number \n {\n   if (isNaN(n) || !isFinite(n))\n     return 0.0;\n\n   if (n <= 0)\n     return 0;\n\n   // note that for small n the two Math.pow operations are less efficient - also, for larger n, you will generate numbers too large to be represented\n   // as machine numbers - we have to round due to possible roundoff error in the generating-function computation.  This illustrates some of the things\n   // you might have to think about in production applications.\n   return Math.round( sqrt_5_inv*(Math.pow(f_arg1,n) - Math.pow(f_arg2,n)) );\n }\n"],"sourceRoot":"/source/"}