{"version":3,"sources":["src/shared/ListNode.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;YAEH;;;;;;;;eAQG;YACF;gBASE;oBAPO,OAAE,GAAW,MAAM,CAAC,CAAY,6BAA6B;oBAE5D,gBAAW,GAAY,KAAK,CAAC,CAAE,kCAAkC;oBAOvE,IAAI,CAAC,KAAK,EAAE,CAAC;oBAEb,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,EAAE,CAAC;gBAC5B,CAAC;gBAOD,sBAAW,qCAAU;oBALtB;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC1B,CAAC;oBAEF;;;;;;uBAMG;yBACF,UAAsB,KAAc;wBAElC,IAAI,CAAC,WAAW,GAAG,KAAK,KAAK,IAAI,CAAC;oBACpC,CAAC;;;mBAZA;gBAoBD,sBAAW,+BAAI;oBANhB;;;;;uBAKG;yBACF;wBAEE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;4BACd,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC;wBAExC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACpB,CAAC;oBAEF;;;;;;uBAMG;yBACF,UAAgB,KAAmB;wBAEjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CACtB,CAAC;4BACC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,YAAY,aAAa,CAAC;gCAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACvB,CAAC;oBACH,CAAC;;;mBAhBA;gBAwBD,sBAAW,+BAAI;oBANhB;;;;;uBAKG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACpB,CAAC;oBAEF;;;;;;uBAMG;yBACF,UAAgB,KAAmB;wBAEjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CACtB,CAAC;4BACC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,YAAY,aAAa,CAAC;gCAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACvB,CAAC;oBACH,CAAC;;;mBAhBA;gBAuBD,sBAAW,+BAAI;oBALhB;;;;uBAIG;yBACF;wBAEE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACpB,CAAC;oBAEF;;;;;;uBAMG;yBACF,UAAgB,KAAa;wBAE3B,EAAE,CAAC,CAAC,KAAK,CAAC;4BACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACvB,CAAC;;;mBAbA;gBAeF;;;;mBAIG;gBACK,iCAAS,GAAhB;oBAEE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,CAAC;gBAEF;;;;mBAIG;gBACK,6BAAK,GAAZ;oBAEE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACpB,CAAC;gBACH,oBAAC;YAAD,CA5IA,AA4IC,IAAA;YA5ID,yCA4IC,CAAA","file":"src/shared/ListNode.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Typescript Math Toolkit: Linked List Node.  A general node structure for a linked list.  Supports single or doubly linked lists and allows a node to be specified\n * as a sentinel node.  Data associated with this node is supplied by an arbitrary Object.  Note that to support fast list operations, nodes are directly mutable as\n * well as node data (you break it, you buy it).\n *\n * @author Jim Armstrong (www.algorithmist.net)\n * \n * @version 1.0\n */\n export class TSMT$ListNode\n {\n   public id: string = \"node\";            // a general id for this node\n\n   private _isSentinel: boolean = false;  // true if this is a sentinal node\n   private _next: TSMT$ListNode;          // reference to next node in sequence\n   private _prev: TSMT$ListNode;          // reference to previous node in sequence\n   private _data: Object;                 // data for this node\n   \n   constructor()\n   { \n     this.clear();\n\n     this._data = new Object();\n   }\n\n  /**\n   * Access whether or not this is a sentinel node\n   *\n   * @return boolean true if this node is a sentinel node\n   */\n   public get isSentinel(): boolean\n   {\n     return this._isSentinel;\n   }\n\n  /**\n   * Assign whether or not this is a sentinel node\n   *\n   * @param value: boolean true if this is a sentinel node\n   *\n   * @return Nothing;\n   */\n   public set isSentinel(value: boolean)\n   {\n     this._isSentinel = value === true;\n   }\n\n  /**\n   * Access the next node in sequence\n   *\n   * @return TSMT$ListNode Reference to the next node in sequence which may be null if no such node has been defined.  Returns direct reference to this node if it is \n   * a sentinel and no next node is defined.\n   */\n   public get next(): TSMT$ListNode\n   {\n     if (!this._next)\n       return this._isSentinel ? this : null;\n\n     return this._next; \n   }\n\n  /**\n   * Assign the next node in sequence\n   *\n   * @param value : TSMT$ListNode Reference to a list node this is the next in sequence\n   *\n   * @return Nothing Assigns the next node in sequence as long as this node has not been designated as a sentinel\n   */\n   public set next(value:TSMT$ListNode)\n   {\n     if (!this._isSentinel)\n     {\n       if (value && value instanceof TSMT$ListNode)\n         this._next = value;\n     }\n   }\n\n  /**\n   * Access the previous node \n   *\n   * @return TSMT$ListNode Reference to previous node in sequence or null if no such node has been defined.  Returns direct reference to this node if it is a sentinel\n   * and no previous node is defined\n   */\n   public get prev(): TSMT$ListNode\n   {\n     return this._prev;\n   }\n\n  /**\n   * Assign the previous node in sequence\n   *\n   * @param value : TSMT$ListNode Reference to a list node that is the previous in sequence\n   *\n   * @return Nothing Assigns the previous node in sequence as long as this node has not been designated as a sentinel\n   */\n   public set prev(value:TSMT$ListNode)\n   {\n     if (!this._isSentinel)\n     {\n       if (value && value instanceof TSMT$ListNode)\n         this._prev = value;\n     }\n   }\n\n  /**\n   * Access the data in this node\n   *\n   * @return Object Direct refence to the list node's data (there is no immutability for performance reasons)\n   */\n   public get data(): Object\n   {\n     return this._data;\n   }\n\n  /**\n   * Assign data to this node\n   *\n   * @param value : Object Node data\n   *\n   * @return Nothing A direct assignment is made to the internal data property as immutability is not enforced for performance reasons - you break it, you buy it.\n   */\n   public set data(value: Object)\n   {\n     if (value)\n       this._data = value;\n   }\n\n  /**\n   * Null out the previous and next references for this node (allows the node to exist as a property bag, but breaks any linkage)\n   *\n   * @return Nothing\n   */\n   public clearRefs(): void\n   {\n     this._next = null;\n     this._prev = null;\n   }\n\n  /**\n   * Prepare this node for garbage collection\n   *\n   * @return Nothing\n   */\n   public clear(): void\n   {\n     this._next = null;\n     this._prev = null;\n     this._data = null;\n   }\n }"],"sourceRoot":"/source/"}