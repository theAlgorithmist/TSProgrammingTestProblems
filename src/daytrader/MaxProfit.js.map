{"version":3,"sources":["src/daytrader/MaxProfit.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;IAEH;;;;;;;;;;OAUG;IACF,mBAA0B,MAAqB;QAE7C,IAAI,GAAG,GAAW,MAAM,CAAC,MAAM,CAAC;QAChC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YACV,MAAM,CAAC,CAAC,CAAC;QAEX,IAAI,GAAG,GAAc,MAAM,CAAC,CAAC,CAAC,CAAC,CAAW,yBAAyB;QACnE,IAAI,MAAM,GAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAG,gCAAgC;QAC1E,IAAI,CAAS,CAAC;QACd,IAAI,CAAS,CAAC;QACd,IAAI,KAAa,CAAC;QAElB,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,EAAE,CAAC,EACpB,CAAC;YACC,KAAK,GAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAa,4BAA4B;YAC7D,CAAC,GAAS,KAAK,GAAG,GAAG,CAAC,CAAW,yBAAyB;YAC1D,MAAM,GAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAG,2EAA2E;YAC5G,GAAG,GAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAE,wBAAwB;QAC3D,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IArBD,iCAqBC,CAAA","file":"src/daytrader/MaxProfit.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function to compute the maximum possible profit that could have been obtained during a single trading session from only a long position\n *\n * @param prices : Array<number> Price of stock/commodity for each time period during the session\n * \n * @return number - maximum possible profit (or minimum loss if negative) from a long position, i.e. buy at time period i and sell at time period j where j > i .\n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export function maxProfit(prices: Array<number>): number \n {\n   var len: number = prices.length;\n   if (len < 2)\n     return 0;\n\n   let low: number    = prices[0];           // record the current low\n   let profit: number = -Number.MAX_VALUE;   // record the current max profit\n   let i: number;\n   let p: number;\n   let price: number;\n\n   for (i=1; i<len; ++i)\n   {\n     price   = prices[i];             // current time-period price\n     p       = price - low;           // current profit or loss\n     profit  = Math.max(p, profit);   // some unnecessary max computations, but this easily fits in min-loss case\n     low     = Math.min(low, price);  // did we hit a new low?\n   }\n\n   return profit;\n }\n"],"sourceRoot":"/source/"}