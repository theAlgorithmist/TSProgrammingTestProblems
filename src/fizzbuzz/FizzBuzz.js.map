{"version":3,"sources":["src/fizzbuzz/FizzBuzz.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;IAEH;;;;;;;;;;OAUG;IACF;QAEE,kHAAkH;QAClH,IAAI,KAAK,GAAkB,IAAI,KAAK,EAAU,CAAC;QAE/C,cAAc;QACd,IAAI,CAAS,CAAC;QACd,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,EAAE,CAAC;YAClB,KAAK,CAAC,IAAI,CAAE,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAE,CAAC;QAEjC,gCAAgC;QAChC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,IAAE,CAAC;YACnB,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAGpB,+BAA+B;QAC/B,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,IAAE,CAAC;YACnB,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAEpB,qCAAqC;QACpC,GAAG,CAAC,CAAC,CAAC,GAAC,EAAE,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,IAAE,EAAE;YACtB,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;QAExB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAxBD,+BAwBC,CAAA","file":"src/fizzbuzz/FizzBuzz.js","sourcesContent":["/** \n * Copyright 2016 Jim Armstrong (www.algorithmist.net)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function to return an array of strings. Each value in the array is either the number corresponding to the one-based array index or 'Fizz' if \n * the index is evenly divisible by 3, 'Buzz' if the index is evenly divisible by 5, and 'FizzBuzz' if the index is evenly divisible by both 3 \n * and 5. The array length is 100 and the length, 3, and 5 may be hardcoded.\n *\n * return Array<string> - Array of length 100 with string values assigned according to the above descripion. \n *\n * @author Jim Armstrong (www.algorithmist.net)\n *\n * @version 1.0\n */\n export function fizzBuzz(): Array<string> \n {\n   // this approach trades mutiple sweeps and straight assignment for a single pass with logic and computation (mods)\n   let fizzy: Array<string> = new Array<string>();\n\n   // first sweep\n   let i: number;\n   for (i=0; i<100; ++i)\n     fizzy.push( (i+1).toString() );\n\n   // second sweep (multiples of 3)\n   for (i=2; i<100; i+=3)\n     fizzy[i] = \"Fizz\";\n\n\n   // third sweep (multiples of 5)\n   for (i=4; i<100; i+=5)\n     fizzy[i] = \"Buzz\";\n\n   // final sweep (multiples of 3 and 5)\n    for (i=14; i<100; i+=15)\n     fizzy[i] = \"FizzBuzz\";\n \n   return fizzy;\n }\n"],"sourceRoot":"/source/"}