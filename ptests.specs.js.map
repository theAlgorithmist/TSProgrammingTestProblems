{"version":3,"sources":["ptests.specs.ts"],"names":[],"mappings":"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CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAA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","file":"ptests.specs.js","sourcesContent":["/** Copyright 2016 Jim Armstrong (www.algorithmist.net)\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// Specs for various 'programming test' problems in Typescript\n\n// test functions/classes\nimport {multiply321        } from './src/mult321/Multiply321';\nimport {exchangeInt        } from './src/exchange/ExchangeInt';\nimport {machEps            } from './src/macheps/MachEps';\nimport {fizzBuzz           } from './src/fizzbuzz/FizzBuzz';\nimport {LinearInterpolation} from './src/interp/Interp';\nimport {RandomIntInRange   } from './src/randomint/RandomIntInRange';\nimport {tripCount          } from './src/uberdriver/ComputeTrips';\nimport {maxProfit          } from './src/daytrader/MaxProfit';\nimport {twoMinMax          } from './src/twomin/TwoMinMax';\nimport {lastTwoDigits      } from './src/twodigits/TwoDigits';\nimport {ExtendedLinkedList } from './src/llist1/ExtendedLinkedList';\nimport {TSMT$ListNode      } from './src/shared/ListNode';\nimport {BisectInterval     } from './src/bisection/Bisect';\nimport {fibonacci          } from './src/fibonacci/Fibonacci';\n\n// Test Suites\ndescribe('Multiply by 321', () => {\n  \n  var result: number;\n  var obj: any = { blah: 10 };  // the typing is to get past what would otherwise be caught at compile time\n\n  // edge cases\n  it('returns zero when multiplied by zero', () => {\n    result = multiply321(0);\n    expect(result).toBe(0);\n  });\n\n  it('returns zero when multiplied by zero as a string', () => {\n    result = multiply321(\"0\");\n    expect(result).toBe(0);\n  });\n\n  it('returns zero when multiplied by string that can still be coerced to zero', () => {\n    result = multiply321(\"0a\");\n    expect(result).toBe(0);\n  });\n\n  it('returns NaN when multiplied by string that can not be coerced to number', () => {\n    result = multiply321(\"abc0123\");\n    expect(isNaN(result)).toBe(true); \n  });\n\n  it('returns NaN when multiplied by an Object', () => {\n    result = multiply321(obj);\n    expect(isNaN(result)).toBe(true);\n  });\n\n  it('returns 321 when multiplied by one', () => {\n    result = multiply321(1);\n    expect(result).toBe(321);\n  });\n\n  it('returns -321 when multiplied by minus one', () => {\n    result = multiply321(-1);\n    expect(result).toBe(-321);\n  });\n\n  it('returns -642 when multiplied by -1.9', () => {\n    result = multiply321(-1.9);\n    expect(result).toBe(-642);\n  });\n\n  // now for the main event ...\n  it('rounds inputs to integer before multiply', () => {\n    result = multiply321(1.27);\n    expect(result).toBe(321);\n  });\n\n  it('returns 642 when multiplied by 2.0', () => {\n    result = multiply321(2.0);\n    expect(result).toBe(642);\n  });\n\n  it('returns 3210 when multiplied by 10', () => {\n    result = multiply321(10);\n    expect(result).toBe(3210);\n  });\n\n  it('returns -3210 when multiplied by -10', () => {\n    result = multiply321(-10);\n    expect(result).toBe(-3210);\n  });\n\n  it('returns 28957410 when multiplied by Beverly Hills 90210', () => {\n    result = multiply321(90210);\n    expect(result).toBe(28957410);\n  });\n\n});\n\ndescribe('Exchange Integers', () => {\n  \n  var result: Object;\n\n  it('properly exchanges 6 and 5', () => {\n    result = exchangeInt(6, 5);\n    expect(+result['a']).toBe(5);\n    expect(+result['b']).toBe(6);\n  });\n\n  it('properly exchanges 1 and -1', () => {\n    result = exchangeInt(1, -1);\n    expect(+result['a']).toBe(-1);\n    expect(+result['b']).toBe(1);\n  });\n\n  it('properly exchanges 4 and 0', () => {\n    result = exchangeInt(4, 0);\n    expect(+result['a']).toBe(0);\n    expect(+result['b']).toBe(4);\n  });\n\n  it('properly exchanges 0 and 5', () => {\n    result = exchangeInt(0, 5);\n    expect(+result['a']).toBe(5);\n    expect(+result['b']).toBe(0);\n  });\n\n  it('properly exchanges -10 and -11', () => {\n    result = exchangeInt(-10, -11);\n    expect(+result['a']).toBe(-11);\n    expect(+result['b']).toBe(-10);\n  });\n});\n\ndescribe('Machine Epsilon', () => {\n  \n  let epsilon: number = machEps();\n  let actual: number  = Math.pow(2.0, -52);\n\n  // this is necessary, but not sufficient (why is a good interview question in and of itself)\n  it('is different from 1.0 when added to 1.0', () => {\n    expect(1.0+epsilon != 1.0).toBe(true);\n  });\n\n  it('epsilon/2 + 1.0 equals 1.0', () => {\n    expect(1.0+ 0.5*epsilon == 1.0).toBe(true);\n  });\n\n  it('should be 2^-52', () => {\n    expect(epsilon).toEqual(actual);\n  });\n});\n\ndescribe('Fizz Buzz', () => {\n  \n  let result: Array<string> = fizzBuzz();\n\n  // if you want to look at the entire array\n  //console.log( \"FizzBuzz result: \", result );\n\n  it('has array length of 100', () => {\n    expect(result.length).toEqual(100);\n  });\n\n  // run through primes not 3 and 5\n  it('assigns index values correctly', () => {\n    expect(result[0]).toEqual(\"1\");\n    expect(result[1]).toEqual(\"2\");\n    expect(result[3]).toEqual(\"4\");\n    expect(result[6]).toEqual(\"7\"); \n    expect(result[10]).toEqual(\"11\");\n    expect(result[12]).toEqual(\"13\");\n    expect(result[16]).toEqual(\"17\");\n    expect(result[22]).toEqual(\"23\");\n    expect(result[30]).toEqual(\"31\");\n    expect(result[40]).toEqual(\"41\");\n    expect(result[42]).toEqual(\"43\");\n    expect(result[46]).toEqual(\"47\");\n    expect(result[46]).toEqual(\"47\");\n    expect(result[52]).toEqual(\"53\");\n    expect(result[58]).toEqual(\"59\");\n    expect(result[60]).toEqual(\"61\");\n    expect(result[66]).toEqual(\"67\");\n    expect(result[70]).toEqual(\"71\");\n    expect(result[72]).toEqual(\"73\");\n    expect(result[78]).toEqual(\"79\");\n    expect(result[82]).toEqual(\"83\");\n    expect(result[88]).toEqual(\"89\");\n    expect(result[96]).toEqual(\"97\");\n  });\n\n  // a few of the fizzes\n  it('assigns indicies evenly divisible by three correctly', () => {\n    expect(result[2].toLowerCase()).toEqual(\"fizz\");\n    expect(result[5].toLowerCase()).toEqual(\"fizz\");\n    expect(result[8].toLowerCase()).toEqual(\"fizz\");\n    expect(result[26].toLowerCase()).toEqual(\"fizz\"); \n    expect(result[32].toLowerCase()).toEqual(\"fizz\"); \n    expect(result[62].toLowerCase()).toEqual(\"fizz\"); \n    expect(result[98].toLowerCase()).toEqual(\"fizz\"); \n  });\n\n  // a few of the buzzes\n  it('assigns indicies evenly divisible by five correctly', () => {\n    expect(result[4].toLowerCase()).toEqual(\"buzz\");\n    expect(result[19].toLowerCase()).toEqual(\"buzz\");\n    expect(result[34].toLowerCase()).toEqual(\"buzz\");\n    expect(result[39].toLowerCase()).toEqual(\"buzz\"); \n    expect(result[49].toLowerCase()).toEqual(\"buzz\"); \n    expect(result[64].toLowerCase()).toEqual(\"buzz\"); \n    expect(result[94].toLowerCase()).toEqual(\"buzz\"); \n  });\n\n   // the fizzbuzzes\n  it('assigns indicies evenly divisible by three & five correctly', () => {\n    expect(result[14].toLowerCase()).toEqual(\"fizzbuzz\");\n    expect(result[29].toLowerCase()).toEqual(\"fizzbuzz\");\n    expect(result[44].toLowerCase()).toEqual(\"fizzbuzz\");\n    expect(result[74].toLowerCase()).toEqual(\"fizzbuzz\"); \n    expect(result[89].toLowerCase()).toEqual(\"fizzbuzz\"); \n  });\n});\n\ndescribe('Linear Interpolation', () => {\n  \n  let interp: LinearInterpolation = new LinearInterpolation();\n\n  it('is returns zero after construction and 0 x-value', () => {\n    expect(interp.interpolate(0)).toBe(0);\n  });\n\n  it('works for any x-interval and default y-values', () => {\n    interp.x1 = -1;\n    interp.x2 = 1;\n    expect(interp.interpolate(0)).toBe(0);\n\n    interp.x1 = -2;\n    interp.x2 = 2;\n    expect(interp.interpolate(0)).toBe(0);\n  });\n\n  it('works for coincident points', () => {\n    interp.x1 = -1;\n    interp.x2 = 1;\n    interp.y1 = -1;\n    interp.y2 = 1;\n\n    expect(interp.interpolate(-1)).toBe(-1);\n    expect(interp.interpolate(1)).toBe(1);\n  });\n\n  it('works for reversed interval', () => {\n    interp.x1 = 2;\n    interp.x2 = -2;\n    interp.y1 = -7;\n    interp.y2 = 7;\n\n    expect(interp.interpolate(-2)).toBe(-7);\n    expect(interp.interpolate(2)).toBe(7);\n  });\n\n  it('correctly returns endpoints', () => {\n    interp.x1 = -3;\n    interp.x2 = 2;\n    interp.y1 = 4;\n    interp.y2 = 6;\n\n    expect(interp.interpolate(-3)).toBeCloseTo(4, 7);\n    expect(interp.interpolate(2)).toBeCloseTo(6, 7);\n  });\n\n  it('works with vertical line', () => {\n    interp.x1 = 3;\n    interp.x2 = 3;\n    interp.y1 = 4;\n    interp.y2 = 100;\n\n    expect(interp.interpolate(3)).toBeCloseTo(4, 7);\n  });\n\n  it('correctly interpolates', () => {\n    interp.x1 = 1;\n    interp.x2 = 2;\n    interp.y1 = 3;\n    interp.y2 = 4;\n\n    expect(interp.interpolate(1.5)).toBeCloseTo(3.5, 7);\n  });\n\n  it('allows extrapolation', () => {\n    interp.x1 = 1;\n    interp.x2 = 2;\n    interp.y1 = 3;\n    interp.y2 = 4;\n\n    expect(interp.interpolate(3)).toBeCloseTo(5, 7);\n    expect(interp.interpolate(0)).toBeCloseTo(2, 7);\n  });\n});\n\ndescribe('Random Integer in Range', () => {\n  \n  // the typical approach - note that as the number of trials increaes, the 'typical' line of code is twice as likely to pick\n  // 1 or 2 than 0 or 3.  it is highly biased away from the endpoints\n  let i: number;\n  let x: number;\n  let i1: number = 0;\n  let i2: number = 3;\n  let f0: number = 0;\n  let f1: number = 1;\n \n  for (i=0; i<10000; ++i)\n  {\n    x = i1 + Math.round(Math.random()*(i2-i1));\n   \n    if (x == 0 || x == 3)\n      f0++; \n    else \n      f1++;\n  }\n \n  let ratio1: number = f1/f0;\n  console.log( \"0 & 3 frequency: \", f0 );\n  console.log( \"1 & 2 frequency: \", f1 );\n  console.log( \"ratio: \", ratio1 );\n\n  // use the Typescript Math Toolkit random integer in range class - note here that the ratio is close to 1 so that 0 or 3 is about as likely\n  // as 1 or 2.\n  let generator: RandomIntInRange = new RandomIntInRange(0, 3);\n  f0 = 0;\n  f1 = 0;\n\n  for (i=0; i<10000; ++i)\n  {\n    x = generator.generate();\n   \n    if (x == 0 || x == 3)\n      f0++; \n    else \n      f1++;\n  }\n\n  let ratio2: number = f1/f0;\n  console.log( \"0 & 3 frequency: \", f0 );\n  console.log( \"1 & 2 frequency: \", f1 );\n  console.log( \"ratio: \", ratio2);\n\n  it('generates consistent iterates in interval', () => {\n    expect(ratio2 < ratio1).toBe(true);\n  });\n});\n\ndescribe('Uber Driver', () => {\n\n  let __getRating: Function = ( trips:Array<number>): number => {\n    return trips.reduce( (total: number, x: number ) => {return total+x} )/+trips.length;\n  };\n\n  let junk: any = {a: -1};\n\n  it('returns 0 for invalid inputs', () => {\n    expect(tripCount(4.4, junk)).toBe(0);\n    expect(tripCount(1/0, 4)).toBe(0);\n    expect(tripCount(4.5, 6)).toBe(0);\n  });\n\n  it('returns ininity for an existing 5-star rating', () => {\n    expect(tripCount(5.0, 4)).toBe(Infinity);\n  });\n\n  // trip sequence where we know the answer in advance\n  it('returns correct number of trips #1', () => {\n    let r: number = __getRating([4, 5, 3, 5, 5]);\n    let n: number = tripCount(r, 3);  // should be 3\n\n    expect(n).toBe(3);\n\n    // new ranking after 3 consecutive 5-star trips following the downrate\n    let rstar: number = __getRating([4, 5, 3, 5, 5, 3, 5, 5, 5]);\n    expect(rstar >= r).toBe(true);\n  });\n\n  // some negative testing ...\n  it('uses abs. value for negative inputs', () => {\n    let r: number = __getRating([4, 5, 3, 5, 5]);\n    let n: number = tripCount(-r, 3);  // should be 3\n\n    expect(n).toBe(3);\n\n    n = tripCount(r, -3);\n    expect(n).toBe(3); \n  });\n\n  it('rounds floating-point number for current ranking', () => {\n    let r: number = __getRating([4, 5, 3, 5, 5]);\n    let n: number = tripCount(r, 3.257);\n\n    expect(n).toBe(3);\n  });\n\n  // this observation may be a bit non-intuitive, so it's illustrated by example\n  it('required numbero of trips is independent of prioer trip count', () => {\n    let r: number = 4;\n    let n: number = tripCount(r, 2); // should be 2\n\n    // observe the sequence - two ways to have a 4.0 trip rating before the two-star\n    r = __getRating([4, 5, 2, 5]);\n\n    console.log( \"Case 1, original rating: \", r );\n    console.log( \"Case 1, after downrate : \", __getRating([4, 5, 2, 5, 2])       );\n    console.log( \"Case 1, after 1 5-star : \", __getRating([4, 5, 2, 5, 2, 5])    );\n    console.log( \"Case 1, after 2 5-star : \", __getRating([4, 5, 2, 5, 2, 5, 5]) );\n    console.log( \"\" );\n \n    // another way to have an original 4-star rating ... 4, 4, 4, 4, 4\n    console.log( \"Case 2, after downrate : \", __getRating([4, 4, 4, 4, 4, 2])       );\n    console.log( \"Case 2, after 1 5-star : \", __getRating([4, 4, 4, 4, 4, 2, 5])    );\n    console.log( \"Case 2, after 2 5-star : \", __getRating([4, 4, 4, 4, 4, 2, 5, 5]) );\n\n    expect(n).toBe(2);\n  });\n});\n\ndescribe('Day Trader', () => {\n  \n  let profit: number = maxProfit([]);\n\n  it('returns zero for empty price list', () => {\n    expect(profit).toEqual(0);\n  });\n\n  it('returns zero for singleton price list', () => {\n    profit = maxProfit( [10] );\n    expect(profit).toEqual(0);\n  });\n\n  // test cases where it is easy to determine the correct result by direct examination\n  it('returns correct max profit #1', () => {\n    profit = maxProfit( [1, 2] );\n    expect(profit).toEqual(1);\n  });\n\n  it('returns correct max profit #2', () => {\n    profit = maxProfit( [3, 3] );\n    expect(profit).toEqual(0);\n  });\n\n  it('returns correct max profit #3', () => {\n    profit = maxProfit( [10, 12, 5, 8, 10, 7, 6, 8, 11, 7] );\n    expect(profit).toEqual(6);\n  });\n\n  // put absolute high/low at opposite ends of the array\n  it('returns correct max profit #4', () => {\n    profit = maxProfit( [5, 11, 5, 8, 10, 7, 6, 8, 10, 12] );\n    expect(profit).toEqual(7);\n  });\n\n  it('returns correct max profit #5', () => {\n    profit = maxProfit( [12, 11, 5, 8, 10, 7, 6, 8, 10, 5] );\n    expect(profit).toEqual(5);\n  });\n\n  it('returns correct max profit #6', () => {\n    profit = maxProfit( [12, 11, 5, 8, 10, 7, 6, 4, 8, 7, 10, 5, 5, 6, 4, 4] );\n    expect(profit).toEqual(6);\n  });\n\n  // and, finally ... the case where prices decline monotonically throughout the session - should return minimum loss (negative number)\n  it('returns correct max profit #7', () => {\n    profit = maxProfit( [100, 98, 96, 94, 93, 90, 87, 85, 80, 75, 70, 60, 50, 45, 40, 37, 35, 30, 26] );\n    expect(profit).toEqual(-1);\n  });\n});\n\ndescribe('Two Mins and Max', () => {\n  \n  let result: Object = twoMinMax([]);\n\n  it('returns correct results for empty array', () => {\n    expect(+result['min1']).toBe(0);\n    expect(+result['min2']).toBe(0);\n    expect(+result['max']).toBe(0);\n  });\n\n  it('returns correct results for singleton array', () => {\n    result = twoMinMax([2]);\n    expect(+result['min1']).toBe(2);\n    expect(+result['min2']).toBe(2);\n    expect(+result['max']).toBe(2);\n  });\n\n  // no gaps, i.e. no min-integer between min and max that is NOT in the input array\n  it('returns specified results for no-gap array #1', () => {\n    result = twoMinMax([1, 2, 3]);\n    expect(+result['min1']).toBe(1);\n    expect(+result['min2']).toBe(1);\n    expect(+result['max']).toBe(3);\n  });\n\n  // degnerate version of above example\n  it('returns specified results for no-gap array #2', () => {\n    result = twoMinMax([1, 1, 1]);\n    expect(+result['min1']).toBe(1);\n    expect(+result['min2']).toBe(1);\n    expect(+result['max']).toBe(1);\n  });\n\n  it('returns correct results arbitrary integer array #1', () => {\n    result = twoMinMax([-1, -3, 7, 2, 20, 3, 5, -11, 14, 13, 12, -1]);\n    expect(+result['min1']).toBe(-11);\n    expect(+result['min2']).toBe(-10);\n    expect(+result['max']).toBe(20);\n  });\n\n  // put the minimum at each end of the array\n  it('returns correct results arbitrary integer array #2', () => {\n    result = twoMinMax([-11, -1, -3, 7, 2, 20, 3, 5, 14, 13, 12, -1]);\n    expect(+result['min1']).toBe(-11);\n    expect(+result['min2']).toBe(-10);\n    expect(+result['max']).toBe(20);\n  });\n\n  it('returns correct results arbitrary integer array #3', () => {\n    result = twoMinMax([-1, -3, 7, 2, 20, 3, 5, 14, 13, 12, -1, -11]);\n    expect(+result['min1']).toBe(-11);\n    expect(+result['min2']).toBe(-10);\n    expect(+result['max']).toBe(20);\n  });\n\n  // duplicate the min\n  it('returns correct results arbitrary integer array #4', () => {\n    result = twoMinMax([-1, -3, 7, 2, 20, 3, -11, 5, 14, 13, 12, -1, -11]);\n    expect(+result['min1']).toBe(-11);\n    expect(+result['min2']).toBe(-10);\n    expect(+result['max']).toBe(20);\n  });\n});\n\ndescribe('Last Two Digits (not multiple of 10)', () => {\n  \n  let junk: any        = \"asdfasdf\";\n  let morejunk: number = 1/0;\n \n  it('returns correct results for invalid arguments list', () => {\n    let result: Object = lastTwoDigits(junk, morejunk);\n\n    expect(+result['n']).toBe(0);\n    expect(+result['ones']).toBe(0);\n    expect(+result['tens']).toBe(0);\n    expect(<boolean> result['square']).toBe(true);\n  });\n\n  it('returns correct results for empty argument list', () => {\n    let result: Object = lastTwoDigits();\n\n    expect(+result['n']).toBe(1);\n    expect(+result['ones']).toBe(1);\n    expect(+result['tens']).toBe(0);\n    expect(<boolean> result['square']).toBe(true);\n  });\n\n  it('properly clips invalid arguments', () => {\n    let result: Object = lastTwoDigits(-1, 11);\n\n    expect(+result['n']).toBe(81);\n    expect(+result['ones']).toBe(1);\n    expect(+result['tens']).toBe(8);\n    expect(<boolean> result['square']).toBe(true);\n  });\n\n  it('returns correct results for correct arguments #1', () => {\n    let result: Object = lastTwoDigits(0, 5);\n\n    expect(+result['n']).toBe(25);\n    expect(+result['ones']).toBe(5);\n    expect(+result['tens']).toBe(2);\n    expect(<boolean> result['square']).toBe(true);\n  });\n\n  it('returns correct results for correct arguments #2', () => {\n    let result: Object = lastTwoDigits(1, 9);\n\n    expect(+result['n']).toBe(361);\n    expect(+result['ones']).toBe(1);\n    expect(+result['tens']).toBe(6);\n    expect(<boolean> result['square']).toBe(false);\n  });\n\n  it('returns correct results for correct arguments #3', () => {\n    let result: Object = lastTwoDigits(2, 1);\n\n    expect(+result['n']).toBe(441);\n    expect(+result['ones']).toBe(1);\n    expect(+result['tens']).toBe(4);\n    expect(<boolean> result['square']).toBe(true);\n  });\n\n  it('returns correct results for correct arguments #4', () => {\n    let result: Object = lastTwoDigits(3, 4);\n\n    expect(+result['n']).toBe(1156);\n    expect(+result['ones']).toBe(6);\n    expect(+result['tens']).toBe(5);\n    expect(<boolean> result['square']).toBe(false);\n  });\n\n  it('returns correct results for correct arguments #5', () => {\n    let result: Object = lastTwoDigits(4, 1);\n\n    expect(+result['n']).toBe(1681);\n    expect(+result['ones']).toBe(1);\n    expect(+result['tens']).toBe(8);\n    expect(<boolean> result['square']).toBe(true);\n  });\n});\n\ndescribe('Linked List k-from-end', () => {\n  \n  let list: ExtendedLinkedList = new ExtendedLinkedList();\n  let node: TSMT$ListNode;\n\n  it('returns null for k < 0', () => {\n    node = list.kfromEnd(-1);\n    expect(node).toBe(null);\n  });\n\n  it('works for singleton list', () => {\n    list.add( \"0\", {});\n\n    node = list.kfromEnd(0);\n    expect(node.id).toBe(\"0\");\n  \n    // beyond beginning of list\n    node = list.kfromEnd(1);\n    expect(node).toBe(null);\n  });\n\n  it('works for arbitrary list', () => {\n    list.add( \"0\", {});\n    list.add( \"1\", {});\n    list.add( \"2\", {});\n    list.add( \"3\", {});\n    list.add( \"4\", {});\n    list.add( \"5\", {});\n    list.add( \"6\", {});\n    list.add( \"7\", {});\n    list.add( \"8\", {});\n    list.add( \"9\", {});\n\n    node = list.kfromEnd(4);\n    expect(node.id).toBe(\"5\");\n  \n    // select head of list as special case\n    node = list.kfromEnd(9);\n    expect(node.id).toBe(\"0\");\n  });\n});\n\ndescribe('Interval Bisection', () => {\n\n  it('returns no root for a = b', () => {\n    let f: Function    = (x: number): number => {return 2.0*x};\n    let result: Object = BisectInterval.bisect(1, 1, f);\n    expect(result['root']).toBe(false);\n  });\n\n  it('returns no root when there is no real root in [a,b]', () => {\n    let f: Function    = (x: number): number => {return x*x - 4.0};\n    let result: Object = BisectInterval.bisect(-10, -5, f);\n    expect(result['root']).toBe(false);\n  });\n\n  it('located roote in right interval', () => {\n    let f: Function    = (x: number): number => {return x*x - 4.0};\n    let result: Object = BisectInterval.bisect(-10, -1, f);\n\n    expect(result['root']).toBe(true);\n    expect(+result['left'] >= -10).toBe(true);\n    expect(+result['right'] <= -1).toBe(true);\n  });\n\n  it('brackets a single root in a dual-root interval', () => {\n    let f: Function    = (x: number): number => {return x*x - 4.0};\n    let result: Object = BisectInterval.bisect(-8, 8, f);\n    expect(result['root']).toBe(true);\n  });\n\n  it('brackets a root of a cubic polynomial', () => {\n    // 4*x^3 -3*x^2 -25*x -6\n    // roots at 3, -0.25, and -2\n\n    let f: Function    = (x: number): number => {return -6 + x*(-25 + x*(-3 + x*4))};  \n    let result: Object = BisectInterval.bisect(2, 5, f);\n    expect(result['root']).toBe(true);\n\n    result = BisectInterval.bisect(-10, 0, f);\n    expect(result['root']).toBe(true);\n  });\n\n});\n\ndescribe('Fibonacci Sequence', () => {\n\n  it('returns zero for invalid argument (NaN)', () => {\n    let arg: any       = NaN;\n    let result: number = fibonacci(arg);\n\n    expect(result).toBe(0);\n  });\n\n  it('returns zero for invalid (negative) argument', () => {\n    let result: number = fibonacci(-1);\n\n    expect(result).toBe(0);\n  });\n\n  it('correctly returns seed values for sequence', () => {\n    let result: number = fibonacci(0);\n\n    expect(result).toBe(0);\n\n    result = fibonacci(1);\n    expect(result).toBe(1);\n  });\n\n  it('correctly returns arbitrary sequence values', () => {\n    let result: number = fibonacci(2);\n\n    expect(result).toBe(1);\n\n    result = fibonacci(3);\n    expect(result).toBe(2);\n\n    result = fibonacci(4);\n    expect(result).toBe(3);\n    \n    result = fibonacci(5);\n    expect(result).toBe(5);\n\n    result = fibonacci(6);\n    expect(result).toBe(8);\n\n    result = fibonacci(7);\n    expect(result).toBe(13);\n\n    result = fibonacci(8);\n    expect(result).toBe(21);\n\n    result = fibonacci(9);\n    expect(result).toBe(34);\n\n    result = fibonacci(64);\n    expect(result).toBe(10610209857723);\n  });\n\n});\n"],"sourceRoot":"/source/"}